-- Crear la base de datos
CREATE DATABASE biblioteca;
USE biblioteca;

-- Crear la tabla usuarios
CREATE TABLE usuarios (
    id_usuario INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    telefono VARCHAR(15) NOT NULL,
    rol ENUM('administrador', 'usuario') NOT NULL,
    password VARCHAR(255) NOT NULL
);

-- Crear la tabla libros
CREATE TABLE libros (
    id_libro INT AUTO_INCREMENT PRIMARY KEY,
    titulo VARCHAR(150) NOT NULL,
    autor VARCHAR(100) NOT NULL,
    genero VARCHAR(50) NOT NULL,
    estado ENUM('disponible', 'prestado') NOT NULL DEFAULT 'disponible'
);

-- Crear la tabla prestamos
CREATE TABLE prestamos (
    id_prestamo INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    id_libro INT NOT NULL,
    fecha_prestamo DATE NOT NULL,
    fecha_devolucion DATE DEFAULT NULL,
    CONSTRAINT fk_prestamos_usuarios FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario) ON DELETE CASCADE,
    CONSTRAINT fk_prestamos_libros FOREIGN KEY (id_libro) REFERENCES libros(id_libro) ON DELETE CASCADE
);

-- Crear la tabla prestamos_express
CREATE TABLE prestamos_express (
    id_express INT AUTO_INCREMENT PRIMARY KEY,
    id_prestamo INT NOT NULL,
    dias_prestamo INT CHECK (dias_prestamo <= 7),
    CONSTRAINT fk_express_prestamos FOREIGN KEY (id_prestamo) REFERENCES prestamos(id_prestamo) ON DELETE CASCADE
);

-- Crear la tabla reportes (opcional)
CREATE TABLE reportes (
    id_reporte INT AUTO_INCREMENT PRIMARY KEY,
    descripcion TEXT,
    fecha_generacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Crear un trigger para actualizar el estado de los libros al registrar devoluciones
DELIMITER //
CREATE TRIGGER actualizar_estado_libro
AFTER UPDATE ON prestamos
FOR EACH ROW
BEGIN
    -- Verifica que la fecha_devolucion no sea NULL y que el libro no esté ya marcado como 'disponible'
    IF NEW.fecha_devolucion IS NOT NULL THEN
        UPDATE libros 
        SET estado = 'disponible' 
        WHERE id_libro = NEW.id_libro AND estado != 'disponible';
    END IF;
END;
//
DELIMITER ;



DELIMITER //
CREATE TRIGGER validar_estado_libro
BEFORE INSERT ON prestamos
FOR EACH ROW
BEGIN
    DECLARE libro_estado VARCHAR(50);
    DECLARE libro_existente INT;

    -- Verifica si el libro existe
    SELECT COUNT(*) INTO libro_existente 
    FROM libros 
    WHERE id_libro = NEW.id_libro;

    IF libro_existente = 0 THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'El libro especificado no existe.';
    END IF;

    -- Obtiene el estado del libro
    SELECT estado INTO libro_estado 
    FROM libros 
    WHERE id_libro = NEW.id_libro;

    -- Verifica si el libro está disponible
    IF libro_estado != 'disponible' THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'El libro no está disponible para préstamo.';
    END IF;
END;
//
DELIMITER ;


